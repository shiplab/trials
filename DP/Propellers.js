/**
 * 
 * This Class define a propeller as well as its basic methods.
 * @class Propeller
     * An actuator that generate a control force due to a control inputs 
     * @see {@link http://eu.wiley.com/WileyCDA/WileyTitle/productCd-1119991498,subjectCd-EEC1.html}  Handbook of Marine Craft Hydrodynamics and Motion Control,Fossen,2014 for futher information
     * 
     * @param {Array} position -Position of the propeller in the vessel
     * @param {any} Diameter - Diameter of the propeller (m) 
     * @param {any} maxrpm - maximum allowed rotation per minute
     * @param {any} maxkw -maximum allowed power in kilowatts(kW)
     * @param {any} [rho] -Water Density. if not defined, 1025 is assumed
     * @param {any} [Ct]  - Propeller Coefficient, define its efficiency.if not defined, 1 is assumed
     * 
     
 */
class Propeller{
      
    constructor(position,Diameter,maxrpm,maxkw,rho,Ct){
        this.maxkw = maxkw;
        this.maxrpm = maxrpm;
        if(typeof rho == 'undefined'){this.rho = 1025;}else{
        this.rho = rho;}
        this.Diameter = Diameter;
        this.x = position[0];
        this.y = position[1];
        this.z = position[2];
        if(typeof Ct == 'undefined'){this.Ct = 1;}else{
        this.Ct = Ct;
        }
    }
    /**
     * 
     * This function returns the equivalent rpm for a given power input
     * @param {any} inputkw - input power (kW)
     * @returns {float} the rotation of the propeller generated by the given power
     * @memberof Propeller
     */
    kw2rpm(inputkw){
                     //Linear 
                    if(inputkw >= this.maxkw){
                        return this.maxkw;
                    }else{
                        return (inputkw*this.maxrpm)/(this.maxkw);
                    }

                }
    /**
     * This function returns the equivalent power needed for a given rotation
     * 
     * @param {any} inputrpm - rotation per minutes of the properller (rpm)
     * @returns {float} the power needed  
     * @memberof Propeller
     */
    rpm2kw(inputrpm){
                    if(inputrpm > this.maxrpm){
                        return this.maxrpm;
                    }else{
                        return (inputrpm*this.maxkw)/(this.maxkw);
                    }   
                }
    rpmsat(inputrpm){
                    if(Math.abs(inputrpm) > this.maxrpm){
                        return this.maxrpm;
                    }else return inputrpm;
                }
    /**
     * 
     * Calculate the generalized formula for Trust generated by the rotation of an  generic propeller
     * @param {any} inputrpm 
     * @returns {float} Force generate by the given rpm
     * @memberof Propeller
     */
    CalForce(inputrpm){

                    if(inputrpm < 0){
                    return -(Math.pow(this.rpmsat(inputrpm),2)*Math.pow(this.Diameter,4)*(this.rho)*this.Ct);
                    }
                    return (Math.pow(this.rpmsat(inputrpm),2)*Math.pow(this.Diameter,4)*(this.rho)*this.Ct);


                }

   /**
    * Reverse method of CalForce. Calculate the rotation needed to generate the given force
    * 
    * @param {any} trust - the force the propeller is causing (N)
    * @returns {float}  - the rotation needed (rpm)
    * @memberof Propeller
    */
   Force2rpm(trust){
                    if(trust < 0){
                         return -(Math.sqrt(-trust/(this.rho*this.Ct))/(Math.pow(this.Diameter,2)));

                    }else
                        return (Math.sqrt(trust/(this.rho*this.Ct))/(Math.pow(this.Diameter,2)));

                }


}

/**
 * 
 * An configuration of marine propellers placed in pods that can be rotated to any horizontal angle (azimuth), making a rudder unnecessary.
 * These give ships better maneuverability than a fixed propeller and rudder system. Azimuth thrusters are the most used in Dynamic positoning systems [Handbook of Marine Craft Hydrodynamics and Motion Control,Fossen,2014,pg.399]
 * @class Azimuth
 * @extends {Propeller}
 * @see Handbook of Marine Craft Hydrodynamics and Motion Control,Fossen,2014 for futher information
 */
class Azimuth extends Propeller {
    constructor(position,Diameter,maxrpm,maxkw,rho,Ct){
        super(position,Diameter,maxrpm,maxkw,rho,Ct);
    }
    /**
     * 
     * 
     * @param {any} inputrpm 
     * @param {any} angle 
     * @returns {Array} - Forces in the Euler coordinate system x,y,z
     * @memberof Azimuth
     */
    getForces(inputrpm,angle){
        var F = this.CalForce(inputrpm);
        var Fy = F*Math.sin(angle);
        var Fx = F*Math.cos(angle);
        return [Fx,Fy,0];
    }
    /**
     * 
     * 
     * @param {any} [Fx,Fy,Fz] 
     * @returns {Array} - Return the rpm and angle need to this thruster to cause the given force
     * @memberof Azimuth
     */
    getInputs([Fx,Fy,Fz]){
        var angle = Math.atan2(Fy,Fx);
        var F = Math.sqrt(Math.pow(Fx,2)+Math.pow(Fy,2));
        var rpm = this.Force2rpm(F);
        return [rpm,angle];

    }

}

/**
 * 
 * Propellers of the craft mounted aft of the hull. Usually in conjunction with rudders. Produces forces only on x axis
 * @class MainPropeller
 * @extends {Propeller}
 * @see Handbook of Marine Craft Hydrodynamics and Motion Control,Fossen,2014,pg.399 for futher information
 */
class MainPropeller extends Propeller {
    constructor(position,Diameter,maxrpm,maxkw,rho,Ct,Rudder_Area){
        super(position,Diameter,maxrpm,maxkw,rho,Ct);
        if(typeof Rudder_Area != 'undefined'){
            this.AddRudder(Rudder_Area)
        }
        
        
    }
    /**
     * 
     * 
     * @param {any} Rudder_Area 
     * @memberof MainPropeller
     */
    AddRudder(Rudder_Area){
        this.Rudder = new Rudder([this.x,this.y,this.z],Rudder_Area,this.rho);
    }
    /**
     * 
     * 
     * @param {any} inputrpm 
     * @param {any} [angle] 
     * @param {any} [speed] 
     * @returns {any} -Return the Force
     * @memberof MainPropeller
     */
    getForces(inputrpm,angle,speed){
            var Fy = 0;
        if(this.Rudder != 'undefined'){
            if(angle != 'undefined' && speed != 'undefined'){
                Fy= this.Rudder.CalForce(angle,speed);
                Fy = Fy[1];
            }
        }
        var F = this.CalForce(inputrpm);
       
        return [F,Fy,0];
    }
    getInputs([Fx,Fy,Fz]){
        var angle = 0;
        var rpm = this.Force2rpm(Fx);
        return [rpm,angle];

    }

}

/**
 * Also called Manoeuvering thruster, bow thruster or stern thruster. 
 * they are transversal propulsion devices of the vessel.
 * 
 * @class TunnelThruster
 * @extends {Propeller}
 */
class TunnelThruster extends Propeller {
    constructor(position,Diameter,maxrpm,maxkw,rho,Ct){
        super(position,Diameter,maxrpm,maxkw,rho,Ct);
        
    }
    /**
     * 
     * 
     * @param {any} inputrpm 
     * @param {any} angle 
     * @returns {Array} - Forces in the Euler coordinate system x,y,z
     * @memberof TunnelThruster
     */
    getForces(inputrpm,angle){
        var F = this.CalForce(inputrpm);
       
        return [0,F,0];
    }
    /**
     * 
     * 
     * @param {any} [Fx,Fy,Fz] 
     * @returns {Array} - Return the rpm and angle need to this thruster to cause the given force. Tunnel thruster always return angle =0
     * @memberof TunnelThruster
     */
    getInputs([Fx,Fy,Fz]){
        
        var angle = 0;
        var rpm = this.Force2rpm(Fy);
        return [rpm,angle];

    }

}

/**
 * 
 * 
 * @class Rudder
 */
class Rudder{
    constructor(position,Area,rho){
        this.x = position[0];
        this.y = position[1];
        this.z = position[2];
        this.Area = Area;
        if(typeof rho == 'undefined'){
            this.rho = 1025;
        }else{this.rho = rho;}
    }
    /**
     * 
     * 
     * @param {any} attackAngle 
     * @param {any} speed 
     * @returns {Array} - Forces in the Euler coordinate system x,y,z
     * @memberof Rudder
     */
    CalForce(attackAngle,speed){
        var F = attackAngle*Math.PI*this.rho*Math.pow(speed,2)*this.Area
        return [0,F,0];
    }

}
